# Start filebeat with debug on processors
# ./filebeat.sh processors

# Step 1-0: Search for index documents
GET banotest/_search?track_total_hits=true

# Step 1-1: Add CSV
"field": "message",
"target_fields": [
  "_id",
  "address.number",
  "address.street_name",
  "address.zipcode",
  "address.city",
  "source",
  "location.lat",
  "location.lon"
]

# Step 1-2: Add Remove Processor
"field": [
  "@timestamp",
  "input",
  "ecs",
  "host",
  "agent",
  "message"
]

# Step 1-3: Add Convert lat/lon to float
"field": "location.lat",
"type": "float"

"field": "location.lon",
"type": "float"

# Step 1-4: Remove banotest index and launch with more data
DELETE banotest
GET banotest/_search?track_total_hits=true

# Step 2-2: Search
GET banotest/_search?track_total_hits=true
GET banotest/_search?track_total_hits=true
{
  "query": {
    "match": {
      "address.street_name": "cormeilles"
    }
  }
}
GET banotest/_search?track_total_hits=true
{
  "query": {
    "bool": {
      "filter": {
        "geo_distance": {
          "distance": "1km",
          "location": {
            "lat": 49.09,
            "lon": 1.98
          }
        }
      }
    }
  }
}
GET banotest/_mapping

# Step 3-1: Create an index template
PUT _template/bano
{
  "index_patterns": "bano*",
  "settings": {
    "index.number_of_shards": 1,
    "index.number_of_replicas": 0,
    "index.analysis": {
      "analyzer": {
        "bano_city_analyzer": {
          "type": "custom",
          "tokenizer": "standard",
          "filter": [
            "lowercase",
            "asciifolding"
          ]
        },
        "bano_street_analyzer": {
          "type": "custom",
          "tokenizer": "standard",
          "filter": [
            "elision",
            "lowercase",
            "asciifolding",
            "bano_synonym"
          ]
        }
      },
      "filter": {
        "bano_synonym": {
          "type": "synonym",
          "synonyms": [
            "bd => boulevard",
            "av => avenue",
            "r => rue",
            "rte => route"
          ]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "address": {
        "properties": {
          "city": {
            "type": "text",
            "analyzer": "bano_city_analyzer",
            "fields": {
              "keyword": {
                "type": "keyword"
              }
            }
          },
          "number": {
            "type": "keyword"
          },
          "street_name": {
            "type": "text",
            "analyzer": "bano_street_analyzer"
          },
          "zipcode": {
            "type": "keyword"
          }
        }
      },
      "id": {
        "type": "keyword"
      },
      "dept": {
        "type": "keyword"
      },
      "source": {
        "type": "keyword"
      },
      "location": {
        "type": "geo_point"
      }
    }
  }
}
# Step 3-2: Remove the existing index
DELETE banotest

# Step 4-1: use the log input pipeline (enable it in filebeat.yml)

# Step 4-2: start filebeat and check how addresses are coming
GET banotest/_count

# Step 4-3: show that we already have injected a dataset
GET bano-*/_count


# Step 5-1: search for addresses (TODO FIX THIS: it does not work anymore as 1 allée des myrtilles is returned)
GET bano-*/_search?track_total_hits=true
{
  "size": 1, 
  "query": {
    "multi_match": {
      "query": "6 allée des myrtilles cergy",
      "fields": [
        "address.city",
        "address.street_name",
        "address.number"
      ],
      "type": "most_fields"
    }
  }
}

# Step 5-2: search by geo point
GET bano-*/_search?track_total_hits=true
{
  "size": 1, 
  "sort": [
    {
      "_geo_distance": {
        "location": {
          "lat": 49.0409,
          "lon": 2.0178
        }
      }
    }
  ]
}

# Step 5-3: search by points with some optimization
GET bano-*/_search?track_total_hits=true
{
  "size": 1, 
  "query": {
    "bool": {
      "filter": {
        "geo_distance": {
          "distance": "1km",
          "location": {
            "lat": 49.0409,
            "lon": 2.0178
          }
        }
      }
    }
  },
  "sort": [
    {
      "_geo_distance": {
        "location": {
          "lat": 49.0409,
          "lon": 2.0178
        }
      }
    }
  ]
}

# Step 5-4: (Optional) search by points with some even more optimization
GET bano-95/_search?track_total_hits=true
{
  "size": 1, 
  "query": {
    "bool": {
      "filter": {
        "geo_distance": {
          "distance": "1km",
          "location": {
            "lat": 49.0409,
            "lon": 2.0178
          }
        }
      }
    }
  },
  "sort": [
    {
      "_geo_distance": {
        "location": {
          "lat": 49.0409,
          "lon": 2.0178
        }
      }
    }
  ]
}

# Step 6-1: person dataset
GET person/_count
GET person/_search?track_total_hits=true
{
  "query": {
    "match": {
      "address.city": "Cergy"
    }
  }
}

# Step 6-2: show the logstash pipeline and the query and run it
# cat logstash-config/pipeline/bano.conf
# cat logstash-config/query/search-by-geo.json 
# ./logstash.sh

# Step 6-3: check for new dataset
GET person-new/_count
GET person-new/_search?track_total_hits=true


